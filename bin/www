#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('datalounge-md:server')
const http = require('http')

let port = process.env.PORT || '3000'

port = normalizePort(port)
app.set('port', port)

/**
 * Create HTTP server.
 */

/**
 * Listen on provided port, on all network interfaces.
 */

app.start(() => {
	var server

	if (process.env.SSL_KEY_PATH && process.env.SSL_CERT_PATH) {
		var fs = require('fs')
		const sslKey = fs.readFileSync(process.env.SSL_KEY_PATH, 'utf8')
		const sslCert = fs.readFileSync(process.env.SSL_CERT_PATH, 'utf8')

		if (process.env.HTTP2) {
			const spdy = require('spdy')
			console.log('http2')
			server = spdy.createServer({
				key: sslKey,
				cert: sslCert
			}, app)
		} else {
			const https = require('https')
			console.log('https')
			server = https.createServer({
				key: sslKey,
				cert: sslCert
			}, app)
		}

		// set up http-> https redirector
		http.createServer(function (req, res) {
			console.log('http redirect to https')
			res.writeHead(302, {
				Location: app.locals.publicOptions.PUBLIC_HOST + req.url
			})
			res.end()
		}).listen(80)
	} else {
		console.log('http ' + port)
		server = http.createServer(app)
	}

	server.on('error', onError)
	server.on('listening', onListening)

	server.listen(port)
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
	var port = parseInt(val, 10)

	if (isNaN(port)) {
		// named pipe
		return val
	}

	if (port >= 0) {
		// port number
		return port
	}

	return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
	if (error.syscall !== 'listen') {
		throw error
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges')
		process.exit(1)
	case 'EADDRINUSE':
		console.error(bind + ' is already in use')
		process.exit(1)
	default:
		throw error
	}
}
/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
	debug('Listening')
}
